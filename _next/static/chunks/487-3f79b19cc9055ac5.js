(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[487],{8455:(t,e,a)=>{"use strict";a.d(e,{Z:()=>s});var i=a(7437),n=a(2265),o=a(7377),r=a.n(o),p=a(5097);let s=t=>{let e,a,{setSelectedFilter:o,initialVersionType:s}=t,[l,c]=(0,n.useState)(null),[d,g]=(0,n.useState)(s||"V1"),[h,_]=(0,n.useState)(!1);return(0,n.useEffect)(()=>{let t=()=>{_(window.innerWidth<=885)};return t(),window.addEventListener("resize",t),()=>window.removeEventListener("resize",t)},[]),(0,n.useEffect)(()=>{o({app_type:l,version_type:d})},[d,l,o]),(0,i.jsx)("div",{className:r()["filter-container"],children:(0,i.jsx)("div",{className:r()["options-list"],children:(0,i.jsxs)("div",{className:r()["filter-group"],children:[(0,i.jsxs)("div",{className:r()["filter-header"],children:[(0,i.jsx)("h3",{children:"Select Version Type"}),(0,i.jsx)("div",{className:r().filterIconWrapper,children:(0,i.jsx)(p.FpS,{className:r().filterIcon,onClick:()=>_(t=>!t)})})]}),(0,i.jsx)("div",{className:"".concat(r()["button-group"]," ").concat(h?r()["show-on-mobile"]:""),children:(e=[{key:"V1",label:"Instant Auth + Chat"},{key:"V2",label:"BYO Auth Chat"},{key:"V3",label:"CMS-Ready Chat"},{key:"V4",label:"No Auth Only Chat"}],a=t=>{g(t),_(!1)},e.map(t=>{let{key:e,label:n}=t;return(0,i.jsx)("button",{className:"".concat(r()["option-button"]," ").concat(d===e?r().active:""),onClick:()=>a(e),type:"button",children:n},e)}))})]})})})}},4009:(t,e,a)=>{"use strict";a.d(e,{Z:()=>o});var i=a(7437);a(2265);var n=a(8867);function o(t){let{selectedFilter:e}=t;console.log("Here is the glimpse of selectedFilter?",e);let a=null==e?void 0:e.app_type,o=null==e?void 0:e.version_type;return console.log("appType:",a),console.log("versionType:",o),console.log("sdfsdfsdfversionType",o),(0,i.jsx)("div",{children:o?(0,i.jsx)(n.default,{content:{V1:[{tag_type:"ol",items:[{tag_type:"li",text:"Integration",sub_items:[{tag_type:"li",text:"Prerequisite",link_configuration:{show:!0,type:"internal",selector_uid:"v1_prerequisites"}},{tag_type:"li",text:"Client Integration",link_configuration:{show:!0,type:"internal",selector_uid:"v1_client_integration"}},{tag_type:"li",text:"Code Example",link_configuration:{show:!0,type:"internal",selector_uid:"v1_code_example"}}],link_configuration:{show:!0,type:"internal",targetSelector:".content-inner-heading"}}],property:{collapse:{collapsable:!0,fc_non_collapsable:!0}}}],V2:[{tag_type:"ol",items:[{tag_type:"li",text:"Integration",sub_items:[{tag_type:"li",text:"Prerequisite",link_configuration:{show:!0,type:"internal",selector_uid:"v2_prerequisites"}},{tag_type:"li",text:"Client Integration",link_configuration:{show:!0,type:"internal",selector_uid:"v2_client_integration"}},{tag_type:"li",text:"Code Example",link_configuration:{show:!0,type:"internal",selector_uid:"v2_code_example"}},{tag_type:"li",text:"Backend Integration",link_configuration:{show:!0,type:"internal",selector_uid:"v2_backend_integration"}}],link_configuration:{show:!0,type:"internal",targetSelector:".content-inner-heading"}}],property:{collapse:{collapsable:!0,fc_non_collapsable:!0}}}],V3:[{tag_type:"ol",items:[{tag_type:"li",text:"Integration",sub_items:[{tag_type:"li",text:"Prerequisite",link_configuration:{show:!0,type:"internal",selector_uid:"v3_prerequisites"}},{tag_type:"li",text:"Client Integration",link_configuration:{show:!0,type:"internal",selector_uid:"v3_client_integration"}}],link_configuration:{show:!0,type:"internal",targetSelector:".content-inner-heading"}}],property:{collapse:{collapsable:!0,fc_non_collapsable:!0}}}],V4:[{tag_type:"ol",items:[{tag_type:"li",text:"Integration",sub_items:[{tag_type:"li",text:"Prerequisite",link_configuration:{show:!0,type:"internal",selector_uid:"v4_prerequisites"}},{tag_type:"li",text:"Client Integration",link_configuration:{show:!0,type:"internal",selector_uid:"v4_client_integration"}},{tag_type:"li",text:"Code Example",link_configuration:{show:!0,type:"internal",selector_uid:"v4_code_example"}}],link_configuration:{show:!0,type:"internal",targetSelector:".content-inner-heading"}}],property:{collapse:{collapsable:!0,fc_non_collapsable:!0}}}]}[o]},"".concat(o)):(0,i.jsx)("div",{children:"Please select a valid application type and version"})})}},8670:(t,e,a)=>{"use strict";a.d(e,{D:()=>i,Z:()=>n});let i={V1:"instant-auth",V2:"byo",V3:"cms-chat",V4:"no-auth"},n={V1:[{tag_type:"h2",text:"Instant Auth + Chat [V1]"},{tag_type:"p",text:"This chat application solution is designed for simple websites built with HTML, JavaScript, and CSS, typically informational sites. It's ideal for products lacking built-in authentication that require seamless integration of both authentication and chat functionality."},{tag_type:"div",children:[{tag_type:"h2",text:"Prerequisites",selector_uid:"v1_prerequisites"},{tag_type:"p",text:"To add chat to your application, follow these steps:"},{tag_type:"ol",items:[{text:"Sign up or log in to your MagicChat account.",link_parts:[{text:"Sign up or log in",link:"https://www.google.com/"}]},{tag_type:"li",text:"Create a new app and be sure to select Version `Instant Auth + Chat` (V1) during setup"},{tag_type:"li",text:"Navigate to your created app's detail page and locate the credentials."}]}]},{tag_type:"callout",type:"info",title:"Starter Code",children:[{tag_type:"p",text:"Clone the starter repo to use it on."},{tag_type:"h4",text:"git clone -b starter https://github.com/magicchat-core/example__v1.git"},{tag_type:"a",href:"https://github.com/magicchat-core/example__v1/blob/b8e477db9d9d00d6c183b338c0b8b9cab4a7b8a3/index.html#L1",text:"Starter Code"}]},{tag_type:"div",children:[{tag_type:"h2",text:"Project Setup",selector_uid:"v1_client_integration"},{tag_type:"p",text:"To integrate chat into your application, follow these steps:"},{tag_type:"div",className:"custom-ordered-list",children:[{tag_type:"div",className:"custom-list-item",children:[{tag_type:"div",className:"list-item-header",text:"1. Load Required Scripts"},{tag_type:"div",className:"sub-items-container",children:[{tag_type:"div",children:[{tag_type:"p",text:"Locate your main entry file (typically index.html) and insert this code snippet into the <head> section. Place it before other dependencies for optimal loading."},{tag_type:"code",show_copy:!0,text:'<script src="https://cdn.socket.io/4.1.2/socket.io.min.js"></script>'}]},{tag_type:"div",children:[{tag_type:"code",show_copy:!0,text:'<script src="https://magicchat-core.github.io/prod-ssc-client-cdns/bundle.js"></script>'}]}]}]},{tag_type:"h3",text:"2. Authentication UI Placment"},{tag_type:"p",text:"Since you are opting for the Auth Service, you have two options for Authentication UI placement. You can choose based on your convenience."},{tag_type:"tabs",items:[{label:"Full Header Mode",content:[{tag_type:"h3",text:"Complete Authentication Header Solution"},{tag_type:"p",text:"When you set Third parameter (header_req) to true. MagicChat will automatically add a fully functional header to your application that includes:"},{tag_type:"ul",items:[{text:"User authentication controls (login/logout)"},{text:"User profile management"},{text:"Notification indicators"},{text:"Branding area"},{text:"Responsive navigation menu"}]},{tag_type:"callout",type:"info",title:"Best For",children:[{tag_type:"p",text:"Applications without an existing header or those looking for a complete out-of-the-box authentication solution."}]},{tag_type:"img",src:"/Asset/magicChatImg/full_header_mode.png",alt:"MagicChat Full Header Implementation"}]},{label:"Header-Less Mode",content:[{tag_type:"h3",text:"Custom Authentication Placement"},{tag_type:"p",text:"Set Third parameter (header_req) to false if you already have a header or want to place authentication components in specific locations.."},{tag_type:"img",src:"/Asset/magicChatImg/header_less_mode.png",alt:"Custom Authentication Placement"},{tag_type:"steps",items:[{title:"Step 1: Place Authentication Components",content:[{tag_type:"p",text:"Add this container where you want authentication controls to appear:"},{tag_type:"code_with_copy",code:'<div id="tezkit-auth-area" ></div>'}]},{title:"Step 2: Initialize MagicChat",content:[{tag_type:"code_with_copy",code:'await window.magicchat_io.setUp(\n          "<Your App Name>", \n          "<Your Api Key>", \n          false, // DISABLE MAGICCHAT HEADER\n        );',language:"javascript"}]},{title:"Step 3: Customize Styling (Optional)",content:[{tag_type:"p",text:"Add CSS to match your existing design:"},{tag_type:"code_with_copy",code:"#tezkit-auth-area {\n  display: inline-flex;\n  gap: 10px; /* space between buttons */\n  align-items: center;\n}\n\n#tezkit-auth-area button {\n  background-color:orange;\n  color: white;\n  border: none;\n  padding: 10px 16px;\n  border-radius: 8px;\n  font-size: 14px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.2s ease;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n}\n\n#tezkit-auth-area button:hover {\n  background-color: #4338ca;\n  transform: translateY(-1px);\n}\n\n#tezkit-auth-area button:active {\n  transform: translateY(1px);\n  background-color: #3730a3;\n}"}]}]},{tag_type:"callout",type:"warning",title:"Important Implementation Notes",children:[{tag_type:"ul",items:[{text:"Place the container in your header or wherever authentication should appear"},{text:"Multiple containers are supported for complex layouts"},{text:"Components automatically adapt to authentication state"},{text:"Elements will render as:",sub_items:[{text:"Login/Signup buttons when logged out"}]}]}]},{tag_type:"callout",type:"info",title:"Available Authentication Components to be styled",children:[{tag_type:"table",headers:["Component","Selector","Description"],rows:[["Login Button",".tezkit-login-btn","Triggers login flow"],["Signup Button",".tezkit-signup-btn","Triggers registration flow"]]}]}]}]}]},{tag_type:"div",className:"custom-list-item",children:[{tag_type:"h3",className:"list-item-header",text:"3. Decide the placement of the Magicchat chat box in your app."}]},{tag_type:"tabs",items:[{label:"Centralized Implementation:",content:[{tag_type:"h4",text:"Centralized Implementation: "},{tag_type:"p",text:"For applications with a common root layout (e.g., main index.js or layout component that renders on every route), combine both setUp and initialize logic in a single location. "},{tag_type:"p",text:"This ensures the chatbox renders consistently across all routes "},{text:"and avoids code duplication across screens.",tag_type:"p"},{tag_type:"h4",text:"Final Implementation"},{tag_type:"p",text:"For single-route applications where the chat interface should appear universally, use this centralized approach:"},{tag_type:"div",className:"sub-items-container",children:[{tag_type:"div",children:[{tag_type:"h4",text:"Step 1 + Step 2 – Show the chatbox on all pages under a specific root route."},{tag_type:"p",text:"Run the setUp function at your application's entry point (usually the landing page or root URL) to ensure it loads immediately when the application starts."},{tag_type:"code_with_copy",code:'\n<script>\n  document.addEventListener("DOMContentLoaded", async function () {\n    // Step 1: Initial setup\n    await window.magicchat_io.setUp(\n      "<MAGICCHAT_APP_NAME>",\n      "<MAGICCHAT_API_KEY>", \n      false // Flip it to switch between \'Full Header Mode\' and \'Header-Less Mode\'.\n    );\n    \n    // Step 2: Initialize chat\n    await window.magicchat_io.initialize({"app_version":"V1"});\n  });\n</script>',language:"javascript"},{tag_type:"callout",type:"info",title:"Parameter Details",children:[{tag_type:"table",headers:["Parameter","Type","Description"],rows:[["app_name","string","Unique application identifier"],["api_key","string","Base64 encoded API key"],["header_req","boolean","Display header with user controls"]]},{tag_type:"callout",type:"warning",title:"Critical Requirement",children:[{tag_type:"p",text:"The setUp function must execute before initialize in all cases."}]}]}]}]},{tag_type:"h4",text:"Example Implementation",selector_uid:"v1_code_example"},{tag_type:"p",text:"View complete implementation examples in our GitHub repository:"},{tag_type:"a",href:"https://github.com/magicchat-core/example__v1/blob/b166e027ad4e841f2698e4817324fef1c7e8d347/index.html#L33",text:"View Implementation Example"}]},{label:"Route-Specific Implementation",content:[{tag_type:"h4",text:"Route-Specific Implementation"},{tag_type:"p",text:"To limit chat functionality to specific routes:"},{tag_type:"ul",items:[{text:"Run the `setUp` function on initial screen load and run the `initialize` only on screens where chat is needed"},{text:"Use the initialize method on specific route components"},{text:"Provides more control over chat visibility"}]},{tag_type:"h4",text:"Final Implementation"},{tag_type:"p",text:"For multi-route applications where the chat interface should appear selectively, use this route-specific approach:"},{tag_type:"div",className:"sub-items-container",children:[{tag_type:"div",children:[{tag_type:"h4",text:"Step 1 – Setup on Initial Landing Pages"},{tag_type:"p",text:"Run the setUp function at your application's entry point (usually the landing page or root URL) to ensure it loads immediately when the application starts."},{tag_type:"code",show_copy:!0,text:'\n<script>\n  document.addEventListener("DOMContentLoaded", async function () {\n    await window.magicchat_io.setUp(\n      "<MAGICCHAT_APP_NAME>", \n      "<MAGICCHAT_API_KEY>", \n      true, // for \'Full Header Mode\' pass true(true by default)\n    );\n  });\n</script>'},{tag_type:"callout",type:"info",title:"Parameter Details",children:[{tag_type:"table",headers:["Parameter","Type","Description"],rows:[["app_name","string","Unique application identifier"],["api_key","string","Base64 encoded API key"],["header_req","boolean","Display header with user controls"]]},{tag_type:"callout",type:"warning",title:"Critical Requirement",children:[{tag_type:"p",text:"The setUp function must execute before initialize in all cases."}]}]}]},{tag_type:"div",children:[{tag_type:"h4",text:"Step 2 – Initialize Chat on Target Pages"},{tag_type:"p",text:"Execute the initialize function on any page where the chat interface should appear (e.g., in the bottom-right corner)."},{tag_type:"code",show_copy:!0,text:'\n<script>\n  document.addEventListener("DOMContentLoaded", async function () {\n    await window.magicchat_io.initialize({"app_version":"V1"});\n  });\n</script>'},{tag_type:"callout",type:"info",title:"Parameter Details",children:[{tag_type:"table",headers:["Parameter","Type","Description"],rows:[["app_version","string","MagicChat application version"]]},{tag_type:"mesgTip",title:"Version Validation",children:[{tag_type:"p",text:"Verify the correct app_version is specified."}]}]}]}]},{tag_type:"h4",text:"Example Implementation"},{tag_type:"p",text:"View complete implementation examples in our GitHub repository:"},{tag_type:"a",href:"https://github.com/magicchat-core/example__v1/blob/b166e027ad4e841f2698e4817324fef1c7e8d347/index.html#L33",text:"View Implementation Example"}]}]},{tag_type:"p",text:"Successfully onboarded users will appear in the MagicChat Admin Panel with their associated applications."},{tag_type:"steps",items:[{title:"Admin Panel - Onboarded Users",content:[{tag_type:"img",src:"/Asset/onboarded_user.png",alt:"MagicChat Admin Panel showing onboarded users"}]},{title:"Admin Panel - No Users",content:[{tag_type:"p",text:"Applications without onboarded users will display an empty state:"},{tag_type:"img",src:"/Asset/no_users_admin.png",alt:"MagicChat Admin Panel showing no onboarded users"}]}]}]}],V2:[{tag_type:"h2",text:"BYO (Bring Your Own) Auth  +  Chat  [V2]"},{tag_type:"p",text:"This chat application is designed specifically for complex sites or apps built with JavaScript on both the client and server sides. It is ideal for products that already have built-in authentication and are looking to seamlessly integrate robust chat functionality."},{tag_type:"div",children:[{tag_type:"h2",text:"Prerequisite",selector_uid:"v2_prerequisites"},{tag_type:"ol",items:[{text:"Signup/Login to your account at MagicChat.",link_parts:[{text:"Signup/Login",link:"https://www.google.com/"}]},{tag_type:"li",text:"Create a New App and be sure to select Version V2 during setup."},{tag_type:"li",text:"Navigate to the App Details page and note your: , App Name, API Key, Tenant ID"}]}]},{tag_type:"div",children:[{tag_type:"h2",text:"Project setup",selector_uid:"v2_client_integration"},{tag_type:"h4",text:"Client Side Integration"},{tag_type:"p",text:"To integrate it into your app, Do the following."},{tag_type:"div",className:"custom-ordered-list",children:[{tag_type:"div",className:"custom-list-item",children:[{tag_type:"div",className:"list-item-header",text:"1. Load The Scripts"},{tag_type:"div",className:"sub-items-container",children:[{tag_type:"div",children:[{tag_type:"p",text:"Locate the main entry file, typically index.html, and insert the following code snippet into the <head> section of the HTML document."},{tag_type:"p",text:"It should ideally be placed head of the root file."},{tag_type:"code",show_copy:!0,text:'<script src="https://cdn.socket.io/4.1.2/socket.io.min.js"></script>'}]},{tag_type:"div",children:[{tag_type:"code",show_copy:!0,text:'<script src="https://magicchat-core.github.io/prod-ssc-client-cdns/bundle.js">\n</script>'}]}]}]}]},{tag_type:"div",className:"custom-list-item",children:[{tag_type:"h3",className:"list-item-header",text:"2. Decide the placement of the Magicchat chat box in your app."}]},{tag_type:"tabs",items:[{label:"Centralized Implementation:",content:[{tag_type:"h4",text:"Centralized Implementation: "},{tag_type:"p",text:"For applications with a common root layout (e.g., main index.js or layout component that renders on every route), combine both setUp and initialize logic in a single location. "},{tag_type:"p",text:"This ensures the chatbox renders consistently across all routes "},{text:"and avoids code duplication across screens.",tag_type:"p"},{tag_type:"h4",text:"Final Implementation"},{tag_type:"p",text:"For single-route applications where the chat interface should appear universally, use this centralized approach:"},{tag_type:"div",className:"sub-items-container",children:[{tag_type:"div",children:[{tag_type:"h4",text:"Step 1 + Step 2 – Show the chatbox on all pages under a specific root route."},{tag_type:"p",text:"Run the setUp function at your application's entry point (usually the landing page or root URL) to ensure it loads immediately when the application starts."},{tag_type:"code_with_copy",code:'\n<script>\n  document.addEventListener("DOMContentLoaded", async () => {\n    const profileData = await window.profileDataPromise; // Change this line to match how your application retrieves profile data\n\n    if (!profileData) {\n      await window.magicchat_io.setUp(\n        "v2_app1",\n        "bGVnYWwxMTFfX1NFUFJBVE9SX192Ml9hcHAx"\n      );\n    } else {\n      await window.magicchat_io.initialize({\n        app_version: "V2",\n        uid: profileData.username,\n      });\n    }\n  });\n</script>',language:"javascript"},{tag_type:"callout",type:"info",title:"Parameter Details",children:[{tag_type:"table",headers:["Parameter","Type","Description"],rows:[["app_name","string","Unique application identifier"],["api_key","string","Base64 encoded API key"]]},{tag_type:"callout",type:"warning",title:"Critical Requirement",children:[{tag_type:"p",text:"The setUp function must execute before initialize in all cases."}]}]}]}]},{tag_type:"h4",text:"Example Implementation",selector_uid:"v2_code_example"},{tag_type:"p",text:"View complete implementation examples in our GitHub repository:"},{tag_type:"a",href:"https://github.com/magicchat-core/example__v1/blob/b166e027ad4e841f2698e4817324fef1c7e8d347/index.html#L33",text:"View Implementation Example"}]},{label:"Route-Specific Implementation",content:[{tag_type:"h4",text:"Route-Specific Implementation"},{tag_type:"p",text:"To limit chat functionality to specific routes:"},{tag_type:"ul",items:[{text:"Run the `setUp` function on initial screen load and run the `initialize` only on screens where chat is needed"},{text:"Use the initialize method on specific route components"},{text:"Provides more control over chat visibility"}]},{tag_type:"h4",text:"Final Implementation"},{tag_type:"p",text:"For multi-route applications where the chat interface should appear selectively, use this route-specific approach:"},{tag_type:"div",className:"sub-items-container",children:[{tag_type:"div",children:[{tag_type:"h4",text:"Step 1 – Setup on Initial Landing Pages"},{tag_type:"p",text:"Run the setUp function at your application's entry point (usually the landing page or root URL) to ensure it loads immediately when the application starts."},{tag_type:"code",show_copy:!0,text:'\n<script>\n  document.addEventListener("DOMContentLoaded", async () => {\n    const profileData = await window.profileDataPromise; // Change this line to match how your application retrieves profile data\n\n    if (!profileData) {\n      await window.magicchat_io.setUp(\n        "v2_app1",\n        "bGVnYWwxMTFfX1NFUFJBVE9SX192Ml9hcHAx"\n      );\n    } \n  });\n</script>'},{tag_type:"callout",type:"info",title:"Parameter Details",children:[{tag_type:"table",headers:["Parameter","Type","Description"],rows:[["app_name","string","Unique application identifier"],["api_key","string","Base64 encoded API key"]]},{tag_type:"callout",type:"warning",title:"Critical Requirement",children:[{tag_type:"p",text:"The setUp function must execute before initialize in all cases."}]}]}]},{tag_type:"div",children:[{tag_type:"h4",text:"Step 2 – Initialize Chat on Target Pages"},{tag_type:"p",text:"Execute the initialize function on any page where the chat interface should appear (e.g., in the bottom-right corner)."},{tag_type:"code",show_copy:!0,text:'\n<script>\n  document.addEventListener("DOMContentLoaded", async () => {\n    const profileData = await window.profileDataPromise; // Change this line to match how your application retrieves profile data\n\n    if (profileData) {\n      await window.magicchat_io.initialize({\n        app_version: "V2",\n        uid: profileData.username,\n      });\n    }\n  });\n</script>'},{tag_type:"callout",type:"info",title:"Parameter Details",children:[{tag_type:"table",headers:["Parameter","Type","Description"],rows:[["app_version","string","MagicChat application version"]]},{tag_type:"mesgTip",title:"Version Validation",children:[{tag_type:"p",text:"Verify the correct app_version is specified."}]}]}]}]},{tag_type:"h4",text:"Example Implementation"},{tag_type:"p",text:"View complete implementation examples in our GitHub repository:"},{tag_type:"a",href:"https://github.com/magicchat-core/example__v1/blob/b166e027ad4e841f2698e4817324fef1c7e8d347/index.html#L33",text:"View Implementation Example"}]}]},{tag_type:"h1",text:"Connecting Magicchat to Your Product’s Authentication"},{tag_type:"h2",text:"Backend Integration",selector_uid:"v2_backend_integration"},{tag_type:"p",text:"For platforms with existing authentication systems, MagicChat requires user onboarding to establish identity mapping between your platform users and MagicChat accounts."},{tag_type:"callout",type:"info",title:"Key Integration Requirement",children:[{tag_type:"p",text:"Each new user must be onboarded with a unique identifier (UID) that serves as the proxy between your platform and MagicChat's user management system."}]},{tag_type:"h3",text:"Onboarding API"},{tag_type:"p",text:"Successfully onboarded users will appear in the MagicChat Admin Panel with their associated applications."},{tag_type:"steps",items:[{title:"Admin Panel - Onboarded Users",content:[{tag_type:"img",src:"/Asset/onboarded_user.png",alt:"MagicChat Admin Panel showing onboarded users"}]},{title:"Admin Panel - No Users",content:[{tag_type:"p",text:"Applications without onboarded users will display an empty state:"},{tag_type:"img",src:"/Asset/no_users_admin.png",alt:"MagicChat Admin Panel showing no onboarded users"}]}]},{tag_type:"h3",text:"User Onboarding Methods"},{tag_type:"tabs",items:[{label:"Backend Integration",content:[{tag_type:"h4",text:"REST API Endpoint"},{tag_type:"p",text:"Use our onboarding API to programmatically register users:"},{tag_type:"code_with_copy",code:"POST https://auth.addchat.tech/dev/onboarding",language:"http"},{tag_type:"h4",text:"Request Example"},{tag_type:"code_with_copy",code:'curl --location \'https://auth.addchat.tech/dev/onboarding\' \\\n      --header \'X-API-Key: YOUR_API_KEY\' \\\n      --header \'Content-Type: application/json\' \\\n      --data \'{\n        "uid": "unique_user_identifier_123",\n        "app_name": "your_application_name",\n        "version": "V2"\n      }\'',language:"bash"},{tag_type:"table",headers:["Parameter","Type","Description"],rows:[["uid","string","Your platform's unique user identifier"],["app_name","string","Your registered MagicChat application name"],["version","string","for BYO Auth Chat API version is `V2`"]]}]},{label:"Frontend Integration",content:[{tag_type:"h4",text:"Client-Side Onboarding"},{tag_type:"p",text:"Call the onboarding method directly from your frontend code:"},{tag_type:"code_with_copy",code:'await window.magicchat_io.onboarding(\n        { \n          "uid": "UNIQUE_USER_ID_FROM_YOUR_PLATFORM" \n        },\n        {\n          "version": "V2",\n          "app_name": "your_application_name"\n        }\n      )',language:"javascript"},{tag_type:"callout",type:"warning",title:"Implementation Note",children:[{tag_type:"p",text:"This method should be called immediately after successful user registration in your application."}]}]},{label:"Admin Panel",content:[{tag_type:"h4",text:"Manual User Onboarding"},{tag_type:"p",text:"Manually onboard users through the MagicChat Admin Interface:"},{tag_type:"img",src:"/Asset/onboarding_via_admin.png",alt:"MagicChat Admin Panel user onboarding interface"},{tag_type:"steps",items:[{title:"Navigate to Users Section",content:[{tag_type:"p",text:"Access the Users management area in your application's admin panel"}]},{title:"Select 'Add User'",content:[{tag_type:"p",text:"Complete the user creation form with required details"}]},{title:"Share Credentials",content:[{tag_type:"p",text:"Provide the generated credentials to the end-user through secure channels"}]}]}]}]},{tag_type:"h3",text:"Logout Cleanup"},{tag_type:"p",text:"Since authentication is managed locally within your own platform, it is essential to also clean up the MagicChat session when a user logs out from your system."},{tag_type:"callout",type:"warning",title:"Important Cleanup Step",children:[{tag_type:"p",text:"Failing to call this method may result in session persistence, causing the chatbox to remain visible after logout."}]},{tag_type:"h4",text:"Usage"},{tag_type:"code_with_copy",code:"window.magicchat_io.logout?.();",language:"javascript"},{tag_type:"p",text:"You should call this method immediately when your user logs out. It ensures MagicChat cleans up all user-related sessions and data."},{tag_type:"h4",text:"Example Implementation"},{tag_type:"p",text:"See the following GitHub example where logout cleanup is properly handled:"},{tag_type:"a",href:"https://github.com/magicchat-core/example__v2/blob/402cbcd3d07fc8cca952fdf6ed1c18b5a2a90b1a/templates/base.html#L95",text:"Logout Example on GitHub"},{tag_type:"callout",type:"info",title:"Implementation Best Practices",children:[{tag_type:"ul",items:[{text:"Trigger onboarding immediately after user registration"},{text:"For bulk onboarding of existing users, contact our support team for batch processing options"},{text:"Don't miss to logout to perform cleanup whenever user is logging out of your platform."}]}]}]}],V3:[{tag_type:"h2",text:"CMS-Ready Chat (Wordpress) [V3]"},{tag_type:"p",text:"This chat application is designed specifically for Wordpress using native wp authentication. It is ideal for products that already have built-in authentication probably using some plugin and are looking to seamlessly integrate robust chat functionality."},{tag_type:"div",children:[{tag_type:"h2",text:"Prerequisite",selector_uid:"v3_prerequisites"},{tag_type:"p",text:"To integrate Chat into your app, do the following:"},{tag_type:"ol",items:[{text:"Signup/Login to your account at MagicChat.",link_parts:[{text:"Signup/Login",link:"https://www.google.com/"}]},{tag_type:"li",text:"Create an app as per your use case. (Be Sure to choose the right version V3)"},{tag_type:"li",text:"Go To created app's  detail page and locate the credentials."}]}]},{tag_type:"div",children:[{tag_type:"h2",text:"Project Setup",selector_uid:"v3_client_integration"},{tag_type:"h3",text:"Client Side Integration"},{tag_type:"callout",type:"success",title:"Plugin Installation",children:[{tag_type:"div",children:[{tag_type:"div",children:[{tag_type:"h4",text:"MagicChat WordPress Plugin"},{tag_type:"a",href:"/addChatPlugin_prod.zip",text:"Download Plugin",download:!0}]}]}]},{tag_type:"steps",items:[{title:"Add MagicChat Credentials",content:[{tag_type:"p",text:"After installing the plugin, navigate to MagicChat settings in your WordPress admin panel and enter your credentials:"},{tag_type:"img",src:"/Asset/add_credentials_wp.png",alt:"MagicChat credentials configuration in WordPress"}]},{title:"Verify Integration",content:[{tag_type:"p",text:"Confirm the chat utility appears correctly on your site:"},{tag_type:"img",src:"/Asset/fashoni_chat_opener_visible.png",alt:"MagicChat opener visible on website"}]}]}]}],V4:[{tag_type:"h2",text:"No Auth  but  Chat  [V4]"},{tag_type:"p",text:"This chat application is designed specifically for complex sites or apps have no built-in authentication and niether want one but chat functionality only."},{tag_type:"div",children:[{tag_type:"h2",text:"Prerequisite",selector_uid:"v4_prerequisites"},{tag_type:"ol",items:[{text:"Signup/Login to your account at MagicChat.",link_parts:[{text:"Signup/Login",link:"https://www.google.com/"}]},{tag_type:"li",text:"Create a New App and be sure to select Version V4 during setup."},{tag_type:"li",text:"Navigate to the App Details page and note your: , App Name, API Key, Tenant ID"}]}]},{tag_type:"div",children:[{tag_type:"h2",text:"Project setup",selector_uid:"v4_client_integration"},{tag_type:"h4",text:"Client Side Integration"},{tag_type:"p",text:"To integrate it into your app, Do the following."},{tag_type:"div",className:"custom-ordered-list",children:[{tag_type:"div",className:"custom-list-item",children:[{tag_type:"div",className:"list-item-header",text:"1. Load The Scripts"},{tag_type:"div",className:"sub-items-container",children:[{tag_type:"div",children:[{tag_type:"p",text:"Locate the main entry file, typically index.html, and insert the following code snippet into the <head> section of the HTML document."},{tag_type:"p",text:"It should ideally be placed head of the root file."},{tag_type:"code",show_copy:!0,text:'<script src="https://cdn.socket.io/4.1.2/socket.io.min.js"></script>'}]},{tag_type:"div",children:[{tag_type:"code",show_copy:!0,text:'<script src="https://magicchat-core.github.io/prod-ssc-client-cdns/bundle.js">\n</script>'}]}]}]}]},{tag_type:"div",className:"custom-list-item",children:[{tag_type:"h3",className:"list-item-header",text:"2. Decide the placement of the Magicchat chat box in your app."}]},{tag_type:"tabs",items:[{label:"Centralized Implementation:",content:[{tag_type:"h4",text:"Centralized Implementation: "},{tag_type:"p",text:"For applications with a common root layout (e.g., main index.js or layout component that renders on every route), combine both setUp and initialize logic in a single location. "},{tag_type:"p",text:"This ensures the chatbox renders consistently across all routes "},{text:"and avoids code duplication across screens.",tag_type:"p"},{tag_type:"h4",text:"Final Implementation"},{tag_type:"p",text:"For single-route applications where the chat interface should appear universally, use this centralized approach:"},{tag_type:"div",className:"sub-items-container",children:[{tag_type:"div",children:[{tag_type:"h4",text:"Step 1 + Step 2 – Show the chatbox on all pages under a specific root route."},{tag_type:"p",text:"Run the setUp function at your application's entry point (usually the landing page or root URL) to ensure it loads immediately when the application starts."},{tag_type:"code_with_copy",code:'\n<script>\n  document.addEventListener("DOMContentLoaded", async function () {\n    // Step 1: Initial setup\n    await window.magicchat_io.setUp(\n      "<MAGICCHAT_APP_NAME>",\n      "<MAGICCHAT_API_KEY>", \n    );\n    \n    // Step 2: Initialize chat\n    await window.magicchat_io.initialize({"app_version":"V4"});\n  });\n</script>',language:"javascript"},{tag_type:"callout",type:"info",title:"Parameter Details",children:[{tag_type:"table",headers:["Parameter","Type","Description"],rows:[["app_name","string","Unique application identifier"],["api_key","string","Base64 encoded API key"]]},{tag_type:"callout",type:"warning",title:"Critical Requirement",children:[{tag_type:"p",text:"The setUp function must execute before initialize in all cases."}]}]}]}]},{tag_type:"h4",text:"Example Implementation",selector_uid:"v4_code_example"},{tag_type:"p",text:"View complete implementation examples in our GitHub repository:"},{tag_type:"a",href:"https://github.com/magicchat-core/example__v1/blob/b166e027ad4e841f2698e4817324fef1c7e8d347/index.html#L33",text:"View Implementation Example"}]},{label:"Route-Specific Implementation",content:[{tag_type:"h4",text:"Route-Specific Implementation"},{tag_type:"p",text:"To limit chat functionality to specific routes:"},{tag_type:"ul",items:[{text:"Run the `setUp` function on initial screen load and run the `initialize` only on screens where chat is needed"},{text:"Use the initialize method on specific route components"},{text:"Provides more control over chat visibility"}]},{tag_type:"h4",text:"Final Implementation"},{tag_type:"p",text:"For multi-route applications where the chat interface should appear selectively, use this route-specific approach:"},{tag_type:"div",className:"sub-items-container",children:[{tag_type:"div",children:[{tag_type:"h4",text:"Step 1 – Setup on Initial Landing Pages"},{tag_type:"p",text:"Run the setUp function at your application's entry point (usually the landing page or root URL) to ensure it loads immediately when the application starts."},{tag_type:"code",show_copy:!0,text:'\n<script>\n  document.addEventListener("DOMContentLoaded", async function () {\n    // Step 1: Initial setup\n    await window.magicchat_io.setUp(\n      "<MAGICCHAT_APP_NAME>",\n      "<MAGICCHAT_API_KEY>", \n    );\n  });\n</script>'},{tag_type:"callout",type:"info",title:"Parameter Details",children:[{tag_type:"table",headers:["Parameter","Type","Description"],rows:[["app_name","string","Unique application identifier"],["api_key","string","Base64 encoded API key"],["header_req","boolean","Display header with user controls"]]},{tag_type:"callout",type:"warning",title:"Critical Requirement",children:[{tag_type:"p",text:"The setUp function must execute before initialize in all cases."}]}]}]},{tag_type:"div",children:[{tag_type:"h4",text:"Step 2 – Initialize Chat on Target Pages"},{tag_type:"p",text:"Execute the initialize function on any page where the chat interface should appear (e.g., in the bottom-right corner)."},{tag_type:"code",show_copy:!0,text:'\n<script>\n  document.addEventListener("DOMContentLoaded", async function () {\n    // Step 2: Initialize chat\n    await window.magicchat_io.initialize({"app_version":"V4"});\n  });\n</script>'},{tag_type:"callout",type:"info",title:"Parameter Details",children:[{tag_type:"table",headers:["Parameter","Type","Description"],rows:[["app_version","string","MagicChat application version"]]},{tag_type:"mesgTip",title:"Version Validation",children:[{tag_type:"p",text:"Verify the correct app_version is specified."}]}]}]}]},{tag_type:"h4",text:"Example Implementation"},{tag_type:"p",text:"View complete implementation examples in our GitHub repository:"},{tag_type:"a",href:"https://github.com/magicchat-core/example__v1/blob/b166e027ad4e841f2698e4817324fef1c7e8d347/index.html#L33",text:"View Implementation Example"}]}]},{tag_type:"p",text:"Successfully onboarded users will appear in the MagicChat Admin Panel with their associated applications."},{tag_type:"steps",items:[{title:"Admin Panel - Onboarded Users",content:[{tag_type:"img",src:"/Asset/onboarded_user.png",alt:"MagicChat Admin Panel showing onboarded users"}]},{title:"Admin Panel - No Users",content:[{tag_type:"p",text:"Applications without onboarded users will display an empty state:"},{tag_type:"img",src:"/Asset/no_users_admin.png",alt:"MagicChat Admin Panel showing no onboarded users"}]}]}]}]}},7377:t=>{t.exports={"filter-container":"filterSty_filter-container__1BeqS","options-list":"filterSty_options-list__H9Qw6","filter-group":"filterSty_filter-group__2N0S2","mobile-dropdown-wrapper":"filterSty_mobile-dropdown-wrapper__KQlh_","button-group":"filterSty_button-group__DLD_2","option-button":"filterSty_option-button__Z0ccI",active:"filterSty_active__3vt_K",filterIconWrapper:"filterSty_filterIconWrapper__zVJ4o","option-container":"filterSty_option-container__AB_bi","submit-btn":"filterSty_submit-btn__9ODrv","filter-header":"filterSty_filter-header__a_vsF",filterIcon:"filterSty_filterIcon__0WjtP","show-on-mobile":"filterSty_show-on-mobile__1JaWi"}},3612:t=>{t.exports={"content-area":"docPageSty_content-area__heU1U","document-container":"docPageSty_document-container__ES_cf",doc_core_wrapper:"docPageSty_doc_core_wrapper__8iYQS",doc_sidebar:"docPageSty_doc_sidebar__Cn_h3",rightWrap:"docPageSty_rightWrap__YUmnZ","main-content":"docPageSty_main-content__YiGGW",mainHeading:"docPageSty_mainHeading__e8kU5",integration_successful:"docPageSty_integration_successful__dHRO2",noFilterMessage:"docPageSty_noFilterMessage__roUrm",mobileSidebarWrapper:"docPageSty_mobileSidebarWrapper__17wmU"}}}]);